#usda 1.0

def Camera "camera"
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0),
                                   (0, 1, 0, 0),
                                   (0, 0, 1, 0),
                                   (0, 0, 20, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    float focalLength = 300;
    float horizontalAperture = 240;
    float verticalAperture = 240
    float2 clippingRange = (0.01, 10000)
}
def Mesh "floor" 
{
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    
    matrix4d xformOp:transform = ( (20, 0, 0, 0),
                                   ( 0, 20, 0, 0),
                                   ( 0, 0, 20, 0),
                                   ( 0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    rel material:binding = </surface>
}

def Mesh "wall" 
{
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]

    matrix4d xformOp:transform = ( (20, 0, 0, 0),
                                   (0, 0, 1, 0),
                                   (0, -10, 0, 0),
                                   (0, 5, -10, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    rel material:binding = </surface>
}

def Material "surface"
{
    color4f outputs:moonray:surface.connect = <baseMtl.outputs:surface>

    def Shader "baseMtl"
    {
        uniform token info:id = "BaseMaterial"
        color4f outputs:surface
    }
}

def Camera "cookie_projector" {
    matrix4d xformOp:transform = ( (1, 0, 0, 0),
                                   (0, 1, 0, 0),
                                   (0, 0, 1, 0),
                                   (2, 5, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float focalLength = 300;
    float horizontalAperture = 240;
    float verticalAperture = 240
}

def MoonrayLightFilter "cookie"
{
    uniform token moonray:lightFilter:shaderId = "CookieLightFilter"
    uniform token moonray:class = "CookieLightFilter"
    float3 inputs:moonray:texture_map.connect = </cookie/imagemap.outputs:out>
    float3 outputs:moonray:lightFilter
    rel moonray:projector = </cookie_projector>

    def Shader "imagemap"
    {
        uniform token info:id = "ImageMap"
        asset inputs:texture = @/work/gshad/moonshine_test/rats_data/light/filter/cookie/maps/dapple.tx@
        float3 outputs:out
    }
}

def DiskLight "spot"
{
    uniform token moonray:class = "SpotLight"
    matrix4d xformOp:transform = ( (0, 0, 1, 0),
                                   (1, 0, 0, 0),
                                   (0, 1, 0, 0),
                                   (0, 9, -8, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float inputs:intensity = 0.2
    float inputs:shaping:cone:angle = 45
    bool inputs:normalize = true
    append rel light:filters = </cookie>
}