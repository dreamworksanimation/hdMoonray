#usda 1.0

def Camera "camera"
{
    matrix4d xformOp:transform = ( ( 0.804478, 0, 0.593982, 0),
                                   ( -0.0198247, 0.999443, 0.0268502, 0),
                                   ( -0.593652, -0.033376, 0.80403, 0),
                                   ( -8.92273, 1.60227, 2.70822, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    float focalLength = 300;
    float horizontalAperture = 240;
    float verticalAperture = 240
    float2 clippingRange = (0.01, 10000)
}

def "gronkle" ( payload =  @/work/rd/raas/hydra/rats/data/gronkle.usdc@)
{
    matrix4d xformOp:transform:a = ( (0.0216271, 0, -0.020791, 0),
                                   (0, 0.03, 0, 0),
                                   (0.020791, 0, 0.0216271, 0),
                                   (0, 0, -7, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:a","xformOp:transform"]
}


def Mesh "floor"
{
    matrix4d xformOp:transform = ( (20, 0, 0, 0),
                                   ( 0, 20, 0, 0),
                                   ( 0, 0, 20, 0),
                                   ( 0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(1, 1, 1)] ( interpolation = "uniform" )
}

def Mesh "wall"
{
    matrix4d xformOp:transform = ( (20, 0, 0, 0),
                                   (0, 0, 1, 0),
                                   (0, -10, 0, 0),
                                   (0, 5, -10, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(1, 1, 1)] ( interpolation = "uniform" )
}

def RectLight "rect"
{
    matrix4d xformOp:transform = ( (-0.0291956, 0, 0.999573, 0),
                                   (0.999573, -4.37114e-08, 0.0291956, 0),
                                   (4.36928e-08, 1, 1.27618e-09, 0),
                                   (0, 4, -8, 1) )
    token moonray:visible_in_camera = "force on"
    uniform token[] xformOpOrder = ["xformOp:transform"]
    color3f color = (1,1,1)
    color3f inputs:color = (1,1,1)
    float intensity = 5
    float inputs:intensity = 5
    float width = 1
    float inputs:width = 1
    float height = 10
    float inputs:height = 10
    asset texture:file = "/work/gshad/moonshine_test/rats_data/light/rect_textured/env_maps/burning_man-med.exr"
    asset inputs:texture:file = "/work/gshad/moonshine_test/rats_data/light/rect_textured/env_maps/burning_man-med.exr"
}
