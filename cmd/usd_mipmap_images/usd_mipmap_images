#!/usr/bin/env python3

import argparse
import glob
import logging
import os
import signal
import subprocess
import sys
import time
from functools import partial

from pxr import Usd, UsdUtils, Sdf

from threading import Thread, Lock

logger = logging.getLogger('usd_mipmap_images')
logging.basicConfig()

conversionAbort=False
sigintCount=0

#
# Determine if a file is mipmapped using the OpenImageIO iinfo command.
# Cache the results to avoid unnecessary process launches.
#
mipmapCache = {}

convertedNames = {}

def isMipMappedAndTiled(filename):
    command = "iinfo -v {}".format(filename)
    proc = subprocess.Popen(command, shell=True,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, err) = proc.communicate()
    if proc.returncode > 0:
        return False
    else:
        decodedOutput = output.decode('utf-8')
        return (decodedOutput.find("MIP-map levels:")!=-1) and (decodedOutput.find("tile size:")!=-1)

def isMipMappedAndTiledCached(filename):
    global mipmapCache

    entry = mipmapCache.get(filename)
    if entry == None:
        entry = isMipMappedAndTiled(filename)
        mipmapCache[filename] = entry
    return entry

def signal_handler(sig, frame):
    global conversionAbort
    global sigintCount

    print("Signal handler: shutting down safely.",file=sys.stderr)
    print("Signal three times to force exit", file=sys.stderr)

    conversionAbort=True
    sigintCount += 1
    if sigintCount == 3:
       sys.exit(1)

class LLayer(object):
    """
    Helper object for tracking USD file information
    """
    def __init__(self, input_file, resolved_file, file_format_args=None):
        self.input_file = input_file
        self.file_format_args = file_format_args or {}
        self.resolved_file = resolved_file

def scan(first_file, no_export):
    global conversionAbort

    """ 
    Scan through all USD files starting from first_file, updating any asset
    paths pointing to images to a .tx version of the image, and return
    the original image paths
    """
    def replace_images_helper(*args, **kwargs) -> bool:
        global conversionAbort

        """
        Helper function to be used with Sdf.CopySpec for replacing asset paths
        pointing to images with an equivalent .tx image
        """
        all_convert_files = kwargs['to_convert_files']
        files_in_layer = kwargs['files_in_layer']
        usd_files_to_update = kwargs['usd_files_to_update']

        # the args are not documented - look these up in wrapCopyUtils.cpp
        spec_type = args[0]
        field = args[1]
        src_layer = args[2]
        dst_layer = args[5]
        src_propspec_path = args[3]

        # Only convert non-animating attributes
        if spec_type != Sdf.SpecTypeAttribute or field != 'default':
            return True
        # Only convert Asset type attributes
        propspec = src_layer.GetPropertyAtPath(src_propspec_path)
        if conversionAbort:
            return True
        if propspec.typeName != Sdf.ValueTypeNames.Asset:
            return True

        if propspec.default == Sdf.ValueBlock() or not propspec.default.path:
            return True
        value = propspec.default.path

        try:
            # wrap this in a try to prevent CopySpec from erroring
            old_asset = Sdf.ComputeAssetPathRelativeToLayer(src_layer, value)
            old_path_glob = os.path.abspath(old_asset)

            # Account for UDIMs
            if '<UDIM>' in old_path_glob:
                old_path_glob = old_path_glob.replace('<UDIM>', '*')

            # Fix for when the UDIM index is missing from exr files
            missing_udim_index = False
            if len(glob.glob(old_path_glob)) == 0:
                new_path_glob = old_path_glob.replace('.*', '')
                if len(glob.glob(new_path_glob)) != 0:
                    missing_udim_index = True
                    old_path_glob = new_path_glob

            #basename, ext = os.path.splitext(old_path_glob)
            #if ext == '.tx':
            #    old_path_glob = basename + '.exr'

            discovered_files = set()
            files_were_converted = False

            # Check for files, filtering/collecting depending on what's found
            ext = ''
            for old_asset_path in glob.glob(old_path_glob):
                #if printDebug:
                #    print("old_asset_path = %s" % old_asset_path)
                basename, ext = os.path.splitext(old_asset_path)
                if ext not in ('.avif', '.bmp', '.cin',  '.dds',  '.dcm',  'dpx',
                               '.env',  '.exr', '.fits', '.gif',  '.hdr',  '.heic',
                               '.ico',  '.iff', '.jif',  '.jfif', '.jfi',  '.jpe',
                               '.jpeg', '.jpg', '.jxl',  '.jp2',  '.j2k',  '.pic',
                               '.pbm',  '.pfm', '.pgm',  '.png',  '.ppm',  '.psd',
                               '.rla',  '.sm',  '.tga',  '.tif',  '.tiff', '.vsm'):
                    continue

                # .exr and .tif can be mipmapped so check before converting
                if isMipMappedAndTiledCached(old_asset_path):
                    continue

                usdpath = src_layer.__str__()[10:-2]
                if usdpath not in usd_files_to_update:
                    usd_files_to_update.add(usdpath)
                if old_asset_path not in all_convert_files:
                    all_convert_files.add(old_asset_path)
                discovered_files.add(old_asset_path)
                files_in_layer.add(old_asset_path)
                if convertedNames.get(old_asset_path) != None:
                    files_were_converted = True


            # Only return an altered value if something has been discovered 
            # and was successfully converted.
            if files_were_converted:
                if missing_udim_index:
                    return True, Sdf.AssetPath(value.replace('.<UDIM>%s' % ext, '.tx'))
                else:
                    #if printDebug:
                    #    print("returning %s" % value.replace(ext, '.tx'))
                    return True, Sdf.AssetPath(value.replace(ext, '.tx'))

            return True, Sdf.AssetPath(value)

        except Exception as e:
            logger.warning("CopyAssetsHelper failed: %s", str(e))
        return True
        # end of replace_image_helper

    processed_files = set()     # A set of USD files that have already been encountered
    altered_files = set()       # A set of USD files that have been modified. Currently unused
    to_convert_files = set()    # A set of image files that should be converted
    usd_files_to_update = set() # Usd files which will require updates
    to_localize = [LLayer(first_file, first_file)]

    # Check all layers by gathering referenced layers while iterating
    while to_localize:
        if conversionAbort:
            logger.error("Aborting conversion")
            break

        llayer = to_localize.pop()
        if llayer.resolved_file in processed_files:
            continue
        processed_files.add(llayer.resolved_file)

        #if 'chemistry_flask_stand01' in llayer.resolved_file:
        #    print("Processing file: %s" % llayer.resolved_file) 

        # Sometimes FindOrOpen succeeds but returns None,
        # other times it throws an exception. Handle both.
        try:
            input_layer = Sdf.Layer.FindOrOpen(llayer.resolved_file,
                                               llayer.file_format_args)
            if (llayer.resolved_file == first_file) and (input_layer == None):
                logger.error("Error reading the initial file {}".format(first_file))
                return None,None
        except:
            input_layer = None
        if not input_layer:
            logger.debug("Could not open layer {0}.".format(llayer.input_file))
            continue

        # Loop over and collect external references of layer
        for ref_file in input_layer.GetExternalReferences():
            # Can be empty in the case of internal references w/o file path.
            if not ref_file:
                continue

            resolved_ref_path = Sdf.ComputeAssetPathRelativeToLayer(
                input_layer, ref_file)
            # The above can return weird relative paths like:
            # /foo/bar/../thing.usd
            # in the case of relative paths. Resolve to :
            # /foo/thing.usd
            resolved_ref_path = os.path.abspath(resolved_ref_path)
            if '$' in resolved_ref_path:
                logger.error(
                        "\nFailed to resolve path \n\t{0} \nin parent \n\t{1}."
                        "\nResolved to \n\t{2}"
                        "\nThe stage has asset paths "
                        "that do not resolve correctly.".format(
                            ref_file, llayer.resolved_file, resolved_ref_path))
                continue

            # Split off any file format args to get a file path.
            sdf_format_args = ''
            if ':SDF_FORMAT_ARGS:' in resolved_ref_path:
                resolved_ref_path, sdf_format_args = resolved_ref_path.split(':SDF_FORMAT_ARGS:')

            # Non-USD likely don't have any textures referenced and can be skipped
            if not os.path.splitext(resolved_ref_path)[-1].startswith('.usd'):
                continue

            # Properly collect file format args
            ff_args = {}
            if sdf_format_args:
                for arg in sdf_format_args.split("&"):
                    arg_pair = arg.split("=")
                    ff_args[arg_pair[0]] = arg_pair[1]

            # Add reference as new layer to check
            to_localize.append(
                LLayer(input_file=ref_file, resolved_file=resolved_ref_path,
                       file_format_args=ff_args))

        # Create a new layer and use Sdf.CopySpec to modify discovered image paths
        new_layer = Sdf.Layer.CreateAnonymous()
        files_in_layer = set()
        # Do a bit of a trick to get some data back while conforming to the expected
        # function stub of Sdf.CopySpec
        copyFunc = partial(replace_images_helper,
                           to_convert_files=to_convert_files,
                           files_in_layer=files_in_layer,
                           usd_files_to_update=usd_files_to_update)
        layer = Sdf.CopySpec(input_layer,
                     "/", new_layer, "/",
                     shouldCopyValueFn=copyFunc,
                     #shouldCopyValueFn=lambda *args: replace_images_helper(*args, \
                     #                                                      to_convert_files=to_convert_files, \
                     #                                                      files_in_layer=files_in_layer),
                     shouldCopyChildrenFn=lambda *args: True)

        # Only export layers that were detected as changed (i.e. an image was found)
        if files_in_layer:
            if not no_export:
                new_layer.Export(llayer.resolved_file, args=llayer.file_format_args)
            altered_files.add(llayer.resolved_file)

    return to_convert_files,usd_files_to_update

#####
# Just get the maketx version to confirm maketx exists.
# The version doesn't matter.
#####
def getMakeTxVersion():
    make_tx = "maketx --version"
    proc = subprocess.Popen(make_tx, shell=True,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, err) = proc.communicate()
    if proc.returncode > 0:
        logger.error("{}Error getting version of maketx. maketx must be in the PATH.".format(err.decode('utf-8')))
        return None
    else:
        return output.decode('utf-8')

#
# just check that all of the files have the necessary permissions and
# directories are writable
#
def check_permissions(files_set, filePermission):
    reportedFiles = set()
    accessIssue = False
    for i, old_path in enumerate(files_set):
        if conversionAbort:
            return False

        if (filePermission & os.R_OK):
            if not os.access(old_path, os.R_OK, follow_symlinks=True):
                if old_path not in reportedFiles:
                    logger.error("No read access to file {}".format(old_path))
                    reportedFiles.add(old_path)
                    accessIssue = True
        if (filePermission & os.W_OK):
            if not os.access(old_path, os.W_OK, follow_symlinks=True):
                if old_path not in reportedFiles:
                    logger.error("No write access to file {}".format(old_path))
                    reportedFiles.add(old_path)
                    accessIssue = True
        textureDir = os.path.dirname(old_path)
        if not os.access(textureDir, os.W_OK, follow_symlinks=True):
            if textureDir not in reportedFiles:
                reportedFiles.add(textureDir)
                logger.error("No write access to directory {}".format(textureDir))
                accessIssue = True
    return accessIssue

#
# format conversion is done with the OpenImageIO command "maketx"
# convert() takes a set of files and processes the list with 1 or more threads
# using convertFile(). If the "--cleanup" option is specified each old file
# will be deleted immediately after conversion to minimize peak disk usage.
#
def convertFile(old_path, delete_originals, force, verbose, stdout, stderr):
    global conversionAbort

    if conversionAbort:
        return False
    basename, ext = os.path.splitext(old_path)
    if ext == ".jpg":
        # Skip if an exr version exists
        old_path_exr = "%s.exr" % basename
        if os.path.exists(old_path_exr):
            return True
    new_path = "{}.tx".format(basename)
    if not os.path.exists(new_path):
        command = 'maketx --oiio "{}" -o "{}"'.format(old_path, new_path)
        if verbose:
            logger.info("Running: {}".format(command))

        proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (output, err) = proc.communicate()
        if proc.returncode > 0:
            if not force:
                conversionAbort = True
            logger.error("Error {} converting {} to {}".format(proc.returncode, old_path, new_path))
            logger.error(err.decode('utf-8'))
            logger.error(output.decode('utf-8'))
            # avoid leaving a corrupted file by removing the output file in case
            # it was an "out of disk" error in the middle of the write
            if os.path.exists(new_path):
                logger.error("Removing {} since it might be corrupt file".format(new_path))
                os.remove(new_path)
            logger.info("usd_mipmap_images: Aborting conversion")
            return False

    # record the fact that the file was successfully converted
    convertedNames[old_path] = new_path

    if delete_originals:
        os.remove(old_path)
    return True

def convert(files_set, delete_originals=False, allow_warnings=False, max_threads=1, verbose=False, force=False):
    global conversionAbort

    """ 
    Take a list of image paths to convert to .tx
    """
    stdout = open(os.devnull, 'w')
    stderr = stdout
    if allow_warnings:
        stdout = sys.stdout
        stderr = sys.stderr


    threads = list()
    threadCount = 0
    num_files = len(files_set)
    for i, old_path in enumerate(files_set):
        # break out of there was a problem
        if conversionAbort:
            break

        threadCount += 1

        logger.info("Converting file {} of {} {}".format(i, num_files, os.path.basename(old_path)))

        thread = Thread(target=convertFile,
                        args=(old_path, delete_originals, force, verbose, stdout, stderr))
        thread.start()
        threads.append(thread)

        if threadCount >= max_threads:
            for t in threads:
                t.join()
            threads = list()
            threadCount = 0

    for t in threads:
        # break out if there was a problem
        if conversionAbort:
            break

        t.join()

        # When we exceed the number of maximum concurrent tests cull any
        # tests that have finished and when tests have been culled start
        # adding new tests.
        while threadCount >= max_threads:
            # break out of there was a problem
            if conversionAbort:
                break

            cullThreads = threads
            threads = list()
            threadCount = 0

            for t in cullThreads:
                if t.is_alive():
                    threads.append(t)
                    threadCount += 1
                else:
                    t.join()

    # Wait for any remaining threads
    for t in threads:
        t.join()



class App(object):
    def __init__(self):
        # get the arguments
        self.args = self._parse_args()

        # configure logger
        logging.getLogger().setLevel(logging.INFO)

    @staticmethod
    def _parse_args():
        parser = argparse.ArgumentParser()
        parser.add_argument(
            'input_file',
            type=str,
            help='Name of the root usd file to convert',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Proceed even if some of the images can\'t be converted'
        )
        parser.add_argument(
            '--cleanup',
            action='store_true',
            help='Delete the original image files after conversion',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Show more details about what is happening',
        )
        parser.add_argument(
            '--allow_warnings',
            action='store_true',
            help='Allow USD and maketx warnings to print',
        )
        parser.add_argument(
            '--no_export',
            action='store_true',
            help='Dont write any usd files, just convert the textures',
        )

        parser.add_argument("--max_threads",
                          type=int,
                          default=1,
                          help="Number of threads to use for texture conversion",
        )

        return vars(parser.parse_known_args()[0])

    def run(self):
        global conversionAbort

        signal.signal(signal.SIGINT, signal_handler)

        """
        confirm maketx is available before starting
        """
        if getMakeTxVersion() == None:
            sys.exit(1)

        """ 
        Run a scan from the root USD file for images to convert, then convert them
        """
        if not self.args['allow_warnings']:
            delegate = UsdUtils.CoalescingDiagnosticDelegate()

        #
        # to avoid making a mess check that the appropriate permissions are available
        # for all of the files before modifying anything
        #
        input_file = os.path.abspath(self.args['input_file'])
        logger.info("Checking permissions and determining what is mipmapped...")
        if not os.path.exists(input_file):
            logger.error("No such file as {}".format(input_file))
            sys.exit(1)

        start_time = time.time()
        # don't modify anything, just get the list of files
        found_files,usd_files_to_update = scan(input_file, True)
        if found_files==None:
            sys.exit(1)

        if (found_files == set()):
            logger.info("Nothing to do")
            sys.exit(0)

        if conversionAbort:
            sys.exit(0)

        # only need write permission on the images if they will be removed
        permissions = os.R_OK | (os.W_OK if self.args['cleanup'] else 0)

        # don't bother checking image permissions in force mode since we'll
        # be converting whatever we can anyway
        if self.args['force']:
            imagePermissionsProblem = False
        else:
            imagePermissionsProblem = check_permissions(found_files,permissions)

        # only need write permission on USD files if they are being updated
        if self.args['no_export']:
            usdaPermissionsProblem = False
        else:
            usdaPermissionsProblem = check_permissions(usd_files_to_update, os.R_OK | os.W_OK)

        if imagePermissionsProblem or usdaPermissionsProblem:
            logger.error("Aborting without changing any files due to permissions issue(s)")
            sys.exit(1)
        logger.info("Permissions check time: {0}\n".format(time.time() - start_time))

        if conversionAbort:
            sys.exit(0)

        #
        # look for existing .tx files as a separate pass to make reporting easier
        #
        logger.info("Checking for pre-converted files...")
        startSize = len(found_files)
        found_files_new = set()
        for file in found_files:
  
            if conversionAbort:
                sys.exit(0)

            basename, ext = os.path.splitext(file)
            if not os.path.exists("{}.tx".format(basename)):
                found_files_new.add(file)
        endSize = len(found_files_new)
        if endSize < startSize:
            logger.info("    {} files already existed".format(startSize - endSize))

        # indicate that file conversion is started to change SIGINT processing
        # to avoid creating corrupted .tx files

        #
        # Now convert all of the files
        #
        logger.info("Converting {} non-tx image files...".format(len(found_files_new)))
        start_time = time.time()
        convert(found_files_new,
                self.args['cleanup'],
                self.args['allow_warnings'],
                self.args['max_threads'],
                self.args['verbose'],
                self.args['force'])
        logger.info("Conversion time: {0}".format(time.time() - start_time))

        if conversionAbort:
            sys.exit(1)

        #
        # Now go back and update the USD files unless that is disabled
        #
        if not self.args['no_export']:
            logger.info("Updating the USD files to reference the new files...")
            start_time = time.time()
            scan(input_file, False)
            logger.info("USD update time: {0}\n".format(time.time() - start_time))

if __name__ == "__main__":
    App().run()
