#usda 1.0

def Camera "camera"
{
    matrix4d xformOp:transform = ( (-1, 0, 0, 0),
                                   (0, 1, 0, 0),
                                   (0, 0, -1, 0),
                                   (-50, 50, -145, 1) )

    uniform token[] xformOpOrder = ["xformOp:transform"]

    float focalLength = 350;
    float horizontalAperture = 240;
    float verticalAperture = 240
}

def SphereLight "light1"
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0),
                                   (0, 1, 0, 0),
                                   (0, 0, 1, 0),
                                   (-20, 60, 50, 1) )
    float exposure = 10
    float inputs:exposure = 10
    uniform token[] xformOpOrder = ["xformOp:transform"]
    bool collection:shadowLink:includeRoot = false
    rel collection:shadowLink:includes = [</sphere3>]
    int moonray:visible_in_camera = 1
}

def SphereLight "light2"
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0),
                                   (0, 1, 0, 0),
                                   (0, 0, 1, 0),
                                   (-80, 60, 50, 1) )
    float exposure = 10
    float inputs:exposure = 10
    uniform token[] xformOpOrder = ["xformOp:transform"]
    bool collection:shadowLink:includeRoot = false
    rel collection:shadowLink:includes = [</sphere1>]
    int moonray:visible_in_camera = 1
}

def Mesh "back"
{
    matrix4d xformOp:transform = ( (0, -100, 0, 0),
                                   (0,    0, -100, 0),
                                   (100, 0, 0, 0),
                                   (-50, 50, 100, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(0.6,0.55,0.4)] ( interpolation = "constant" )
}

def Mesh "bottom"
{
    matrix4d xformOp:transform = ( (100, 0, 0, 0),
                                   (0, 100, 0, 0),
                                   (0, 0, 100, 0),
                                   (-50, 0, 50, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(0.6,0.55,0.4)] ( interpolation = "constant" )
}

def Mesh "left"
{
    matrix4d xformOp:transform = ( (0, 100, 0, 0),
                                   (-100, 0, 0, 0),
                                   (0, 0, 100, 0),
                                   (0, 50, 50, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(0.7,0.1,0.08)] ( interpolation = "constant" )
}

def Mesh "right"
{
    matrix4d xformOp:transform = ( (0, -100, 0, 0),
                                   (100, 0, 0, 0),
                                   (0, 0, 100, 0),
                                   (-100, 50, 50, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(0.2,0.7,0.2)] ( interpolation = "constant" )
}

def Mesh "top"
{
    matrix4d xformOp:transform = ( (-100, 0, 0, 0),
                                   (0, -100, 0, 0),
                                   (0, 0, 100, 0),
                                   (-50, 100, 50, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(0.6,0.55,0.4)] ( interpolation = "constant" )
}

def Sphere "sphere1"
{
    matrix4d xformOp:transform = ( (-10, 0, 0, 0),
                                   (0, -10, 0, 0),
                                   (0, 0, 10, 0),
                                   (-20, 10, 30, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    color3f[] primvars:displayColor = [(1,0,0)] ( interpolation = "constant" )
}

def Sphere "sphere2"
{
    matrix4d xformOp:transform = (  (-14, 0, 0, 0),
                                    (0, -14, 0, 0),
                                    (0, 0, 14, 0),
                                    (-45, 14, 50, 1))
    uniform token[] xformOpOrder = ["xformOp:transform"]
    color3f[] primvars:displayColor = [(0,1,0)] ( interpolation = "constant" )
}

def Sphere "sphere3"
{
    matrix4d xformOp:transform = (  (-10, 0, 0, 0),
                                    (0, -10, 0, 0),
                                    (0, 0, 10, 0),
                                    (-80, 10, 50, 1))
    uniform token[] xformOpOrder = ["xformOp:transform"]
    color3f[] primvars:displayColor = [(0,0,1)] ( interpolation = "constant" )
}


