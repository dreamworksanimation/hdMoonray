#usda 1.0

def Camera "camera"
{
    matrix4d xformOp:transform = ( (0.97038, 0, 0.241585, 0),
                                   (0.0982038, 0.913652, -0.394457, 0),
                                   (-0.220725, 0.406498, 0.886589, 0),
                                   (-2.29199, 5.33596, 9.42018, 1) )

    uniform token[] xformOpOrder = ["xformOp:transform"]

    float focalLength = 300;
    float horizontalAperture = 240;
    float verticalAperture = 135;
    float2 clippingRange = (0.01, 10000)
}


def "gronkle" ( payload =  @/work/rd/raas/hydra/rats/data/gronkle.usdc@)
{
    matrix4d xformOp:transform:a = ( (0.0216271, 0, -0.020791, 0),
                                     (0, 0.03, 0, 0),
                                     (0.020791, 0, 0.0216271, 0),
                                     (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:a","xformOp:transform"]
}


def Mesh "floor"
{
    matrix4d xformOp:transform = ( (20, 0, 0, 0),
                                   ( 0, 20, 0, 0),
                                   ( 0, 0, 20, 0),
                                   ( 0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(1, 1, 1)] ( interpolation = "uniform" )
}

def Mesh "wall"
{
    matrix4d xformOp:transform = ( (20, 0, 0, 0),
                                   (0, 0, 1, 0),
                                   (0, -10, 0, 0),
                                   (0, 5, -10, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(1, 1, 1)] ( interpolation = "uniform" )
}

def DistantLight "sun"
{
    matrix4d xformOp:transform = ( (0.786774, 0.019432, -0.616936, 0),
                                   (-0.525164, 0.546265, -0.652531, 0),
                                   (0.324331, 0.837387, 0.439992, 0),
                                   (13.7238, 7, 2.81431, 1)  )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    token moonray:visible_in_camera = "force on"
    color3f color = (0.748, 0.748, 0.678)
    color3f inputs:color = (0.748, 0.748, 0.678)
    float intensity = 1 # default is 50000.0
    float inputs:intensity = 1
    float exposure = 9
    float inputs:exposure = 9
    float angle = 5 # default is 0.53
    float inputs:angle = 5
}
