#usda 1.0

def Camera "camera"
{
    matrix4d xformOp:transform = (  (0.658163, 0.0116603, -0.752785, 0),
                                    (-0.20786, 0.963831, -0.166803, 0),
                                    (0.723613, 0.266257, 0.636782, 0),
                                    (11.6274, 5.83104, 1.19332, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    float focalLength = 300;
    float horizontalAperture = 240;
    float verticalAperture = 240
    float2 clippingRange = (0.01, 10000)
}

def "gronkle" ( payload =  @/work/rd/raas/hydra/rats/data/gronkle.usdc@)
{
    matrix4d xformOp:transform:a = ( (0.03, 0, 0, 0),
                                   (0, 0.03, 0, 0),
                                   (0, 0, 0.03, 0),
                                   (0, 0, -7, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:a","xformOp:transform"]
}


def Mesh "floor"
{
    matrix4d xformOp:transform = ( (20, 0, 0, 0),
                                   ( 0, 20, 0, 0),
                                   ( 0, 0, 20, 0),
                                   ( 0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(1, 1, 1)] ( interpolation = "uniform" )
}

def Mesh "wall"
{
    matrix4d xformOp:transform = ( (20, 0, 0, 0),
                                   (0, 0, 1, 0),
                                   (0, -10, 0, 0),
                                   (0, 5, -10, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    float3[] extent = [(-0.5, 0, -0.5), (0.5, 0, 0.5)]
    int[] faceVertexCounts = [4]
    int[] faceVertexIndices = [0, 1, 3, 2]
    point3f[] points = [(-0.5, 0, 0.5), (0.5, 0, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5)]
    float2[] primvars:uv = [(0, 0), (1, 0), (1, 1), (0, 1)] ( interpolation = "faceVarying" )
    color3f[] primvars:displayColor = [(1, 1, 1)] ( interpolation = "uniform" )
}

def CylinderLight "cylinder"
{
    # uniform token moonray:class = "CylinderLight"
    matrix4d xformOp:transform = ( ( 0.999573, -4.37114e-08, 0.0291956, 0),
                                   (0.0291956, 0, -0.999573, 0),
                                   (4.36928e-08, 1, 1.27618e-09, 0),
                                   (0, 4, -8, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
    token moonray:visible_in_camera = "force on"
    bool enableColorTemperature = true
    bool inputs:enableColorTemperature = true
    float colorTemperature = 6500
    float inputs:colorTemperature = 6500
    float intensity = 5
    float inputs:intensity = 5
    float radius = 0.3
    float inputs:radius = 0.3
    float length = 10
    float inputs:length = 10
}
